// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  emailVerified Boolean @default(false)
  password    String
  role        Role      @default(student)
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  courses     Course[]  @relation("UserCourses")
  enrollments Enrollment[]
  submissions Submission[]
}

model Course {
  id          String     @id @default(uuid())
  title       String
  description String?
  instructor  User       @relation("UserCourses", fields: [instructorId], references: [id])
  instructorId String
  price       Decimal    @default(0.00)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lessons     Lesson[]
  quizzes     Quiz[]
  tags        Tag[]
  enrollments Enrollment[]
  assignments Assignment[]
}

model Lesson {
  id           String     @id @default(uuid())
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     String
  title        String
  videoUrl     String?
  content      String?
  displayOrder Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isDeleted    Boolean    @default(false)
  deletedAt    DateTime?
  tags         Tag[]      @relation("LessonTags") 
}

model Tag {
  id          String     @id @default(uuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  lesson      Lesson?    @relation("LessonTags", fields: [lessonId], references: [id]) 
  lessonId    String?
  content     String
}

model Quiz {
  id          String     @id @default(uuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  title       String
  description String?
  timeLimit   Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model Question {
  id          String     @id @default(uuid())
  quiz        Quiz       @relation(fields: [quizId], references: [id])
  quizId      String
  content     String
  questionType QuestionType
  displayOrder Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  answers     Answer[]
}

model Answer {
  id          String     @id @default(uuid())
  question    Question   @relation(fields: [questionId], references: [id])
  questionId  String
  content     String
  isCorrect   Boolean    @default(false)
  type        AnswerType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Enrollment {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  enrolledAt  DateTime   @default(now())
}

model Assignment {
  id          String     @id @default(uuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  submissions Submission[]
}

model Submission {
  id          String     @id @default(uuid())
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  fileUrl     String?
  submittedAt DateTime   @default(now())
}

// Enum types
enum Role {
  student
  instructor
  admin
}

enum QuestionType {
  single
  multiple
  fill
}

enum AnswerType {
  option
  multi
  fill
}
